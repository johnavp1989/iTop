<?php
//
// File generated by ... on the 2014-07-21T21:27:53+0200
// Please do not edit manually
//

/**
 * Classes and menus for teemip-ip-mgmt (version 2.0.0)
 *
 * @author      iTop compiler
 * @license     http://opensource.org/licenses/AGPL-3.0
 */



class IPRangeUsage extends Typology
{
	public static function Init()
	{
		$aParams = array
		(
			'category' => 'bizmodel,searchable,ipmgmt',
			'key_type' => 'autoincrement',
			'name_attcode' => 'name',
			'state_attcode' => '',
			'reconc_keys' => array('name', 'org_id', 'org_name'),
			'db_table' => 'iprangeusage',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',
		);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeExternalKey("org_id", array("targetclass"=>'Organization', "allowed_values"=>null, "sql"=>'org_id', "is_null_allowed"=>false, "on_target_delete"=>DEL_MANUAL, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("org_name", array("allowed_values"=>null, "extkey_attcode"=>'org_id', "target_attcode"=>'name', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeString("description", array("allowed_values"=>null, "sql"=>'description', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false)));


		MetaModel::Init_SetZListItems('details', array (
  0 => 'org_id',
  1 => 'name',
  2 => 'description',
));
		MetaModel::Init_SetZListItems('standard_search', array (
  0 => 'org_id',
  1 => 'name',
  2 => 'description',
));
		MetaModel::Init_SetZListItems('list', array (
  0 => 'description',
  1 => 'org_id',
));

	}


}



require_once('_ipusage.class.inc.php'); // Implementation of the class _IPUsage
class IPUsage extends _IPUsage
{
	public static function Init()
	{
		$aParams = array
		(
			'category' => 'bizmodel,searchable,ipmgmt',
			'key_type' => 'autoincrement',
			'name_attcode' => 'name',
			'state_attcode' => '',
			'reconc_keys' => array('name', 'org_id', 'org_name'),
			'db_table' => 'ipusage',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',
		);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeExternalKey("org_id", array("targetclass"=>'Organization', "allowed_values"=>null, "sql"=>'org_id', "is_null_allowed"=>false, "on_target_delete"=>DEL_MANUAL, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("org_name", array("allowed_values"=>null, "extkey_attcode"=>'org_id', "target_attcode"=>'name', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeString("description", array("allowed_values"=>null, "sql"=>'description', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false)));


		MetaModel::Init_SetZListItems('details', array (
  0 => 'org_id',
  1 => 'name',
  2 => 'description',
));
		MetaModel::Init_SetZListItems('standard_search', array (
  0 => 'org_id',
  1 => 'name',
  2 => 'description',
));
		MetaModel::Init_SetZListItems('list', array (
  0 => 'description',
  1 => 'org_id',
));

	}


}

/**
 * Persistent classes for IP Mgmt 
 *
 * @copyright   Copyright (C) 2010-2012 Combodo SARL
 * @license     http://opensource.org/licenses/AGPL-3.0
 */

require_once('_ipobject.class.inc.php'); // Implementation of the class _IPObject
abstract class IPObject extends _IPObject
{
	public static function Init()
	{
		$aParams = array
		(
			'category' => 'bizmodel,ipmgmt',
			'key_type' => 'autoincrement',
			'name_attcode' => '',
			'state_attcode' => '',
			'reconc_keys' => array(''),
			'db_table' => 'ipobject',
			'db_key_field' => 'id',
			'db_finalclass_field' => 'finalclass',
		);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeExternalKey("org_id", array("targetclass"=>'Organization', "allowed_values"=>null, "sql"=>'org_id', "is_null_allowed"=>false, "on_target_delete"=>DEL_MANUAL, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("org_name", array("allowed_values"=>null, "extkey_attcode"=>'org_id', "target_attcode"=>'name', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeEnum("status", array("allowed_values"=>new ValueSetEnum("reserved,allocated,released,unassigned"), "display_style"=>'list', "sql"=>'status', "default_value"=>'allocated', "is_null_allowed"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeText("comment", array("allowed_values"=>null, "sql"=>'comment', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalKey("requestor_id", array("targetclass"=>'Person', "allowed_values"=>new ValueSetObjects("SELECT Person AS p WHERE p.org_id = :this->org_id"), "sql"=>'requestor_id', "is_null_allowed"=>true, "on_target_delete"=>DEL_MANUAL, "depends_on"=>array('org_id'), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("requestor_name", array("allowed_values"=>null, "extkey_attcode"=>'requestor_id', "target_attcode"=>'name', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeLinkedSetIndirect("contact_list", array("linked_class"=>'lnkContactToIPObject', "ext_key_to_me"=>'ipobject_id', "ext_key_to_remote"=>'contact_id', "allowed_values"=>null, "count_min"=>0, "count_max"=>0, "duplicates"=>false, "depends_on"=>array('org_id'), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeLinkedSetIndirect("document_list", array("linked_class"=>'lnkDocToIPObject', "ext_key_to_me"=>'ipobject_id', "ext_key_to_remote"=>'document_id', "allowed_values"=>null, "count_min"=>0, "count_max"=>0, "duplicates"=>false, "depends_on"=>array('org_id'), "always_load_in_tables"=>false)));



	}


}



require_once('_ipblock.class.inc.php'); // Implementation of the class _IPBlock
abstract class IPBlock extends _IPBlock
{
	public static function Init()
	{
		$aParams = array
		(
			'category' => 'bizmodel,ipmgmt',
			'key_type' => 'autoincrement',
			'name_attcode' => '',
			'state_attcode' => '',
			'reconc_keys' => array('name', 'org_id', 'org_name'),
			'db_table' => 'ipblock',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',
		);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeString("name", array("allowed_values"=>null, "sql"=>'name', "default_value"=>'', "is_null_allowed"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeString("type", array("allowed_values"=>null, "sql"=>'type', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalKey("parent_org_id", array("targetclass"=>'Organization', "allowed_values"=>new ValueSetObjects("SELECT Organization AS parent JOIN Organization AS child ON child.parent_id = parent.id WHERE child.id = :this->org_id"), "sql"=>'parent_org_id', "is_null_allowed"=>true, "on_target_delete"=>DEL_MANUAL, "depends_on"=>array('org_id'), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("parent_org_name", array("allowed_values"=>null, "extkey_attcode"=>'parent_org_id', "target_attcode"=>'name', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeEnum("write_reason", array("allowed_values"=>new ValueSetEnum("none,shrink,split,expand,is_delete,parent_is_delete"), "display_style"=>'list', "sql"=>'write_reason', "default_value"=>'none', "is_null_allowed"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeIPPercentage("occupancy", array("allowed_values"=>null, "sql"=>'occupancy', "default_value"=>'0', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeIPPercentage("children_occupancy", array("allowed_values"=>null, "sql"=>'children_occupancy', "default_value"=>'0', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeIPPercentage("subnet_occupancy", array("allowed_values"=>null, "sql"=>'subnet_occupancy', "default_value"=>'0', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeLinkedSetIndirect("location_list", array("linked_class"=>'lnkIPBlockToLocation', "ext_key_to_me"=>'ipblock_id', "ext_key_to_remote"=>'location_id', "allowed_values"=>null, "count_min"=>0, "count_max"=>0, "duplicates"=>false, "depends_on"=>array('org_id'), "always_load_in_tables"=>false)));


		MetaModel::Init_SetZListItems('standard_search', array (
  0 => 'name',
  1 => 'type',
  2 => 'org_id',
  3 => 'requestor_id',
));
		MetaModel::Init_SetZListItems('list', array (
  0 => 'type',
  1 => 'org_id',
));

	}


}



require_once('_ipv4block.class.inc.php'); // Implementation of the class _IPv4Block
class IPv4Block extends _IPv4Block
{
	public static function Init()
	{
		$aParams = array
		(
			'category' => 'bizmodel,searchable,ipmgmt',
			'key_type' => 'autoincrement',
			'name_attcode' => 'name',
			'state_attcode' => '',
			'reconc_keys' => array('name', 'org_id', 'org_name'),
			'db_table' => 'ipblockv4',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',
			'icon' => utils::GetAbsoluteUrlModulesRoot().'teemip-ip-mgmt/images/ipblock.png',
			'order_by_default' => array('firstip' => true),
		);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeHierarchicalKey("parent_id", array("allowed_values"=>new ValueSetObjects("SELECT IPv4Block AS b WHERE (b.org_id = :this->org_id AND :this->parent_org_id = 0) OR (b.org_id = :this->parent_org_id)"), "sql"=>'parent_id', "is_null_allowed"=>true, "on_target_delete"=>DEL_MOVEUP, "depends_on"=>array('org_id', 'parent_org_id'), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("parent_name", array("allowed_values"=>null, "extkey_attcode"=>'parent_id', "target_attcode"=>'name', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeIPAddress("firstip", array("allowed_values"=>null, "sql"=>'firstip', "default_value"=>'', "is_null_allowed"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeIPAddress("lastip", array("allowed_values"=>null, "sql"=>'lastip', "default_value"=>'', "is_null_allowed"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));


		MetaModel::Init_SetZListItems('details', array (
  0 => 'location_list',
  1 => 'contact_list',
  2 => 'document_list',
  'col:col1' => 
  array (
    'fieldset:Class:IPBlock:baseinfo' => 
    array (
      0 => 'org_id',
      1 => 'parent_org_id',
      2 => 'parent_id',
      3 => 'name',
      4 => 'type',
      5 => 'comment',
      6 => 'requestor_id',
    ),
  ),
  'col:col2' => 
  array (
    'fieldset:Class:IPBlock:ipinfo' => 
    array (
      0 => 'firstip',
      1 => 'lastip',
    ),
  ),
));
		MetaModel::Init_SetZListItems('standard_search', array (
  0 => 'parent_id',
  1 => 'name',
  2 => 'firstip',
  3 => 'lastip',
  4 => 'type',
  5 => 'org_id',
  6 => 'parent_org_id',
  7 => 'requestor_id',
));
		MetaModel::Init_SetZListItems('list', array (
  0 => 'parent_id',
  1 => 'firstip',
  2 => 'lastip',
  3 => 'type',
  4 => 'occupancy',
  5 => 'org_id',
  6 => 'parent_org_id',
));

	}


}



require_once('_ipsubnet.class.inc.php'); // Implementation of the class _IPSubnet
abstract class IPSubnet extends _IPSubnet
{
	public static function Init()
	{
		$aParams = array
		(
			'category' => 'bizmodel,ipmgmt',
			'key_type' => 'autoincrement',
			'name_attcode' => '',
			'state_attcode' => '',
			'reconc_keys' => array('name', 'org_id', 'org_name'),
			'db_table' => 'ipsubnet',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',
		);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeString("name", array("allowed_values"=>null, "sql"=>'name', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeString("type", array("allowed_values"=>null, "sql"=>'type', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeDateTime("release_date", array("allowed_values"=>null, "sql"=>'release_date', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeEnum("write_reason", array("allowed_values"=>new ValueSetEnum("none,shrink,split,expand,is_delete"), "display_style"=>'list', "sql"=>'write_reason', "default_value"=>'none', "is_null_allowed"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeIPPercentage("ip_occupancy", array("allowed_values"=>null, "sql"=>'ip_occupancy', "default_value"=>'0', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeIPPercentage("range_occupancy", array("allowed_values"=>null, "sql"=>'range_occupancy', "default_value"=>'0', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeEnum("alarm_water_mark", array("allowed_values"=>new ValueSetEnum("no_alarm,high_sent,low_sent"), "display_style"=>'list', "sql"=>'alarm_water_mark', "default_value"=>'no_alarm', "is_null_allowed"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeLinkedSetIndirect("vlans_list", array("linked_class"=>'lnkIPSubnetToVLAN', "ext_key_to_me"=>'ipsubnet_id', "ext_key_to_remote"=>'vlan_id', "allowed_values"=>null, "count_min"=>0, "count_max"=>0, "duplicates"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeLinkedSetIndirect("location_list", array("linked_class"=>'lnkIPSubnetToLocation', "ext_key_to_me"=>'ipsubnet_id', "ext_key_to_remote"=>'location_id', "allowed_values"=>null, "count_min"=>0, "count_max"=>0, "duplicates"=>false, "depends_on"=>array('org_id'), "always_load_in_tables"=>false)));


		MetaModel::Init_SetZListItems('standard_search', array (
  0 => 'name',
  1 => 'status',
  2 => 'type',
  3 => 'org_id',
  4 => 'requestor_id',
  5 => 'release_date',
));
		MetaModel::Init_SetZListItems('list', array (
  0 => 'name',
  1 => 'status',
  2 => 'type',
  3 => 'org_id',
  4 => 'release_date',
));

	}


}



require_once('_ipv4subnet.class.inc.php'); // Implementation of the class _IPv4Subnet
class IPv4Subnet extends _IPv4Subnet
{
	public static function Init()
	{
		$aParams = array
		(
			'category' => 'bizmodel,searchable,ipmgmt',
			'key_type' => 'autoincrement',
			'name_attcode' => 'ip',
			'state_attcode' => '',
			'reconc_keys' => array('ip', 'name', 'org_id', 'org_name'),
			'db_table' => 'ipsubnetv4',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',
			'icon' => utils::GetAbsoluteUrlModulesRoot().'teemip-ip-mgmt/images/ipsubnet.png',
			'order_by_default' => array('ip' => true),
		);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeExternalKey("block_id", array("targetclass"=>'IPv4Block', "allowed_values"=>new ValueSetObjects("SELECT IPv4Block AS b WHERE b.org_id = :this->org_id"), "sql"=>'block_id', "is_null_allowed"=>false, "on_target_delete"=>DEL_MANUAL, "depends_on"=>array('org_id'), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("block_name", array("allowed_values"=>null, "extkey_attcode"=>'block_id', "target_attcode"=>'name', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeIPAddress("ip", array("allowed_values"=>null, "sql"=>'ip', "default_value"=>'', "is_null_allowed"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeEnum("mask", array("allowed_values"=>new ValueSetEnum("255.255.0.0,255.255.128.0,255.255.192.0,255.255.224.0,255.255.240.0,255.255.248.0,255.255.252.0,255.255.254.0,255.255.255.0,255.255.255.128,255.255.255.192,255.255.255.224,255.255.255.240,255.255.255.248,255.255.255.252,255.255.255.254"), "display_style"=>'list', "sql"=>'mask', "default_value"=>'', "is_null_allowed"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeIPAddress("gatewayip", array("allowed_values"=>null, "sql"=>'gatewayip', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array('ip', 'mask'), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeIPAddress("broadcastip", array("allowed_values"=>null, "sql"=>'broadcastip', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array('ip', 'mask'), "always_load_in_tables"=>false)));


		MetaModel::Init_SetZListItems('details', array (
  0 => 'location_list',
  1 => 'contact_list',
  2 => 'document_list',
  3 => 'vlans_list',
  'col:col1' => 
  array (
    'fieldset:Class:IPSubnet:baseinfo' => 
    array (
      0 => 'org_id',
      1 => 'name',
      2 => 'status',
      3 => 'type',
      4 => 'comment',
      5 => 'requestor_id',
      6 => 'release_date',
    ),
  ),
  'col:col2' => 
  array (
    'fieldset:Class:IPSubnet:ipinfo' => 
    array (
      0 => 'block_id',
      1 => 'ip',
      2 => 'mask',
      3 => 'gatewayip',
      4 => 'broadcastip',
    ),
  ),
));
		MetaModel::Init_SetZListItems('standard_search', array (
  0 => 'name',
  1 => 'block_id',
  2 => 'ip',
  3 => 'mask',
  4 => 'status',
  5 => 'type',
  6 => 'org_id',
  7 => 'requestor_id',
  8 => 'release_date',
));
		MetaModel::Init_SetZListItems('list', array (
  0 => 'mask',
  1 => 'name',
  2 => 'status',
  3 => 'type',
  4 => 'ip_occupancy',
  5 => 'org_id',
  6 => 'release_date',
));

	}


}



require_once('_iprange.class.inc.php'); // Implementation of the class _IPRange
abstract class IPRange extends _IPRange
{
	public static function Init()
	{
		$aParams = array
		(
			'category' => 'bizmodel,ipmgmt',
			'key_type' => 'autoincrement',
			'name_attcode' => '',
			'state_attcode' => '',
			'reconc_keys' => array('range', 'org_id', 'org_name'),
			'db_table' => 'iprange',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',
		);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeString("range", array("allowed_values"=>null, "sql"=>'range', "default_value"=>'', "is_null_allowed"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalKey("usage_id", array("targetclass"=>'IPRangeUsage', "allowed_values"=>new ValueSetObjects("SELECT IPRangeUsage AS r WHERE r.org_id = :this->org_id"), "sql"=>'usage_id', "is_null_allowed"=>true, "on_target_delete"=>DEL_MANUAL, "depends_on"=>array('org_id'), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("usage_name", array("allowed_values"=>null, "extkey_attcode"=>'usage_id', "target_attcode"=>'name', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeEnum("dhcp", array("allowed_values"=>new ValueSetEnum("dhcp_no,dhcp_yes"), "display_style"=>'radio_horizontal', "sql"=>'dhcp', "default_value"=>'dhcp_no', "is_null_allowed"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeEnum("write_reason", array("allowed_values"=>new ValueSetEnum("none,shrink,split,expand,is_delete"), "display_style"=>'list', "sql"=>'write_reason', "default_value"=>'none', "is_null_allowed"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeIPPercentage("occupancy", array("allowed_values"=>null, "sql"=>'occupancy', "default_value"=>'0', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeEnum("alarm_water_mark", array("allowed_values"=>new ValueSetEnum("no_alarm,high_sent,low_sent"), "display_style"=>'list', "sql"=>'alarm_water_mark', "default_value"=>'no_alarm', "is_null_allowed"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));


		MetaModel::Init_SetZListItems('standard_search', array (
  0 => 'range',
  1 => 'usage_id',
  2 => 'dhcp',
  3 => 'org_id',
  4 => 'requestor_id',
));
		MetaModel::Init_SetZListItems('list', array (
  0 => 'usage_id',
  1 => 'dhcp',
  2 => 'occupancy',
  3 => 'org_id',
));

	}


}



require_once('_ipv4range.class.inc.php'); // Implementation of the class _IPv4Range
class IPv4Range extends _IPv4Range
{
	public static function Init()
	{
		$aParams = array
		(
			'category' => 'bizmodel,searchable,ipmgmt',
			'key_type' => 'autoincrement',
			'name_attcode' => 'range',
			'state_attcode' => '',
			'reconc_keys' => array('subnet_ip', 'range', 'org_id', 'org_name'),
			'db_table' => 'iprangev4',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',
			'icon' => utils::GetAbsoluteUrlModulesRoot().'teemip-ip-mgmt/images/iprange.png',
			'order_by_default' => array('firstip' => true),
		);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeExternalKey("subnet_id", array("targetclass"=>'IPv4Subnet', "allowed_values"=>new ValueSetObjects("SELECT IPv4Subnet AS s WHERE s.org_id = :this->org_id"), "sql"=>'subnet_id', "is_null_allowed"=>false, "on_target_delete"=>DEL_MANUAL, "depends_on"=>array('org_id'), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("subnet_ip", array("allowed_values"=>null, "extkey_attcode"=>'subnet_id', "target_attcode"=>'ip', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeIPAddress("firstip", array("allowed_values"=>null, "sql"=>'firstip', "default_value"=>'', "is_null_allowed"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeIPAddress("lastip", array("allowed_values"=>null, "sql"=>'lastip', "default_value"=>'', "is_null_allowed"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));


		MetaModel::Init_SetZListItems('details', array (
  0 => 'org_id',
  1 => 'subnet_id',
  2 => 'range',
  3 => 'firstip',
  4 => 'lastip',
  5 => 'usage_id',
  6 => 'dhcp',
  7 => 'comment',
  8 => 'requestor_id',
  9 => 'contact_list',
  10 => 'document_list',
));
		MetaModel::Init_SetZListItems('standard_search', array (
  0 => 'range',
  1 => 'subnet_id',
  2 => 'firstip',
  3 => 'lastip',
  4 => 'usage_id',
  5 => 'dhcp',
  6 => 'org_id',
  7 => 'requestor_id',
));
		MetaModel::Init_SetZListItems('list', array (
  0 => 'subnet_id',
  1 => 'firstip',
  2 => 'lastip',
  3 => 'usage_id',
  4 => 'dhcp',
  5 => 'occupancy',
  6 => 'org_id',
));

	}


}



require_once('_ipaddress.class.inc.php'); // Implementation of the class _IPAddress
abstract class IPAddress extends _IPAddress
{
	public static function Init()
	{
		$aParams = array
		(
			'category' => 'bizmodel,ipmgmt',
			'key_type' => 'autoincrement',
			'name_attcode' => '',
			'state_attcode' => '',
			'reconc_keys' => array('fqdn', 'org_id', 'org_name'),
			'db_table' => 'ipaddress',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',
			'icon' => utils::GetAbsoluteUrlModulesRoot().'teemip-ip-mgmt/images/ipaddress.png',
		);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeHostName("short_name", array("allowed_values"=>null, "sql"=>'short_name', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalKey("domain_id", array("targetclass"=>'Domain', "allowed_values"=>new ValueSetObjects("SELECT Domain AS d WHERE d.org_id = :this->org_id"), "sql"=>'domain_id', "is_null_allowed"=>true, "on_target_delete"=>DEL_MANUAL, "depends_on"=>array('org_id'), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("domain_name", array("allowed_values"=>null, "extkey_attcode"=>'domain_id', "target_attcode"=>'name', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeDomainName("fqdn", array("allowed_values"=>null, "sql"=>'fqdn', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array('short_name', 'domain_id'), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalKey("usage_id", array("targetclass"=>'IPUsage', "allowed_values"=>new ValueSetObjects("SELECT IPUsage AS i WHERE i.org_id = :this->org_id"), "sql"=>'usage_id', "is_null_allowed"=>true, "on_target_delete"=>DEL_MANUAL, "depends_on"=>array('org_id'), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("usage_name", array("allowed_values"=>null, "extkey_attcode"=>'usage_id', "target_attcode"=>'name', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeDateTime("release_date", array("allowed_values"=>null, "sql"=>'release_date', "default_value"=>'', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeLinkedSetIndirect("ip_list", array("linked_class"=>'lnkIPAdressToIPAddress', "ext_key_to_me"=>'ip1_id', "ext_key_to_remote"=>'ip2_id', "allowed_values"=>null, "count_min"=>0, "count_max"=>0, "duplicates"=>false, "depends_on"=>array('org_id'), "always_load_in_tables"=>false)));


		MetaModel::Init_SetZListItems('standard_search', array (
  0 => 'status',
  1 => 'fqdn',
  2 => 'usage_id',
  3 => 'org_id',
  4 => 'requestor_id',
  5 => 'release_date',
));
		MetaModel::Init_SetZListItems('list', array (
  0 => 'status',
  1 => 'fqdn',
  2 => 'usage_id',
));

	}


}



require_once('_ipv4address.class.inc.php'); // Implementation of the class _IPv4Address
class IPv4Address extends _IPv4Address
{
	public static function Init()
	{
		$aParams = array
		(
			'category' => 'bizmodel,searchable,ipmgmt',
			'key_type' => 'autoincrement',
			'name_attcode' => 'ip',
			'state_attcode' => '',
			'reconc_keys' => array('ip', 'org_id', 'org_name'),
			'db_table' => 'ipaddressv4',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',
			'icon' => utils::GetAbsoluteUrlModulesRoot().'teemip-ip-mgmt/images/ipaddress.png',
			'order_by_default' => array('ip' => true),
		);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeExternalKey("subnet_id", array("targetclass"=>'IPv4Subnet', "allowed_values"=>new ValueSetObjects("SELECT IPv4Subnet AS s WHERE s.org_id = :this->org_id"), "sql"=>'subnet_id', "is_null_allowed"=>true, "on_target_delete"=>DEL_MANUAL, "depends_on"=>array('org_id'), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("subnet_ip", array("allowed_values"=>null, "extkey_attcode"=>'subnet_id', "target_attcode"=>'ip', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalKey("range_id", array("targetclass"=>'IPv4Range', "allowed_values"=>new ValueSetObjects("SELECT IPv4Range AS r WHERE r.subnet_id = :this->subnet_id AND r.org_id = :this->org_id"), "sql"=>'range_id', "is_null_allowed"=>true, "on_target_delete"=>DEL_MANUAL, "depends_on"=>array('subnet_id'), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("range_name", array("allowed_values"=>null, "extkey_attcode"=>'range_id', "target_attcode"=>'range', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeIPAddress("ip", array("allowed_values"=>null, "sql"=>'ip', "default_value"=>'', "is_null_allowed"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));


		MetaModel::Init_SetZListItems('details', array (
  0 => 'ip_list',
  'col:col1' => 
  array (
    'fieldset:Class:IPAddress:baseinfo' => 
    array (
      0 => 'org_id',
      1 => 'status',
      2 => 'short_name',
      3 => 'domain_id',
      4 => 'usage_id',
      5 => 'comment',
      6 => 'requestor_id',
      7 => 'release_date',
    ),
  ),
  'col:col2' => 
  array (
    'fieldset:Class:IPAddress:ipinfo' => 
    array (
      0 => 'subnet_id',
      1 => 'range_id',
      2 => 'ip',
      3 => 'fqdn',
    ),
  ),
));
		MetaModel::Init_SetZListItems('standard_search', array (
  0 => 'ip',
  1 => 'status',
  2 => 'fqdn',
  3 => 'usage_id',
  4 => 'subnet_id',
  5 => 'org_id',
  6 => 'requestor_id',
  7 => 'release_date',
));
		MetaModel::Init_SetZListItems('list', array (
  0 => 'status',
  1 => 'short_name',
  2 => 'fqdn',
  3 => 'usage_id',
  4 => 'subnet_id',
  5 => 'org_id',
  6 => 'release_date',
));

	}


}


class lnkContactToIPObject extends cmdbAbstractObject
{
	public static function Init()
	{
		$aParams = array
		(
			'category' => 'bizmodel,ipmgmt',
			'key_type' => 'autoincrement',
			'name_attcode' => array('ipobject_id', 'contact_id'),
			'state_attcode' => '',
			'reconc_keys' => array('ipobject_id', 'contact_id'),
			'db_table' => 'lnkcontacttoipobject',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',
		);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeExternalKey("ipobject_id", array("targetclass"=>'IPObject', "allowed_values"=>null, "sql"=>'ipobject_id', "is_null_allowed"=>false, "on_target_delete"=>DEL_AUTO, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalKey("contact_id", array("targetclass"=>'Contact', "allowed_values"=>null, "sql"=>'contact_id', "is_null_allowed"=>false, "on_target_delete"=>DEL_AUTO, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("contact_name", array("allowed_values"=>null, "extkey_attcode"=>'contact_id', "target_attcode"=>'name', "always_load_in_tables"=>false)));


		MetaModel::Init_SetZListItems('details', array (
  0 => 'ipobject_id',
  1 => 'contact_id',
));
		MetaModel::Init_SetZListItems('standard_search', array (
  0 => 'ipobject_id',
  1 => 'contact_id',
));
		MetaModel::Init_SetZListItems('list', array (
  0 => 'ipobject_id',
  1 => 'contact_id',
));

	}


}


class lnkDocToIPObject extends cmdbAbstractObject
{
	public static function Init()
	{
		$aParams = array
		(
			'category' => 'bizmodel,ipmgmt',
			'key_type' => 'autoincrement',
			'name_attcode' => array('ipobject_id', 'document_id'),
			'state_attcode' => '',
			'reconc_keys' => array('ipobject_id', 'document_id'),
			'db_table' => 'lnkdoctoipobject',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',
		);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeExternalKey("ipobject_id", array("targetclass"=>'IPObject', "allowed_values"=>null, "sql"=>'ipobject_id', "is_null_allowed"=>false, "on_target_delete"=>DEL_AUTO, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalKey("document_id", array("targetclass"=>'Document', "allowed_values"=>null, "sql"=>'document_id', "is_null_allowed"=>false, "on_target_delete"=>DEL_AUTO, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("document_name", array("allowed_values"=>null, "extkey_attcode"=>'document_id', "target_attcode"=>'name', "always_load_in_tables"=>false)));


		MetaModel::Init_SetZListItems('details', array (
  0 => 'ipobject_id',
  1 => 'document_id',
));
		MetaModel::Init_SetZListItems('standard_search', array (
  0 => 'ipobject_id',
  1 => 'document_id',
));
		MetaModel::Init_SetZListItems('list', array (
  0 => 'ipobject_id',
  1 => 'document_id',
));

	}


}


class lnkIPBlockToLocation extends cmdbAbstractObject
{
	public static function Init()
	{
		$aParams = array
		(
			'category' => 'bizmodel',
			'key_type' => 'autoincrement',
			'name_attcode' => array('location_id', 'ipblock_id'),
			'state_attcode' => '',
			'reconc_keys' => array('location_id', 'ipblock_id'),
			'db_table' => 'lnkipblocktolocation',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',
		);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeExternalKey("ipblock_id", array("targetclass"=>'IPBlock', "allowed_values"=>null, "sql"=>'ipblock_id', "is_null_allowed"=>false, "on_target_delete"=>DEL_AUTO, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("ipblock_name", array("allowed_values"=>null, "extkey_attcode"=>'ipblock_id', "target_attcode"=>'name', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalKey("location_id", array("targetclass"=>'Location', "allowed_values"=>null, "sql"=>'location_id', "is_null_allowed"=>false, "on_target_delete"=>DEL_AUTO, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("location_name", array("allowed_values"=>null, "extkey_attcode"=>'location_id', "target_attcode"=>'name', "always_load_in_tables"=>false)));


		MetaModel::Init_SetZListItems('details', array (
  0 => 'ipblock_id',
  1 => 'location_id',
));
		MetaModel::Init_SetZListItems('standard_search', array (
  0 => 'ipblock_id',
  1 => 'location_id',
));
		MetaModel::Init_SetZListItems('list', array (
  0 => 'ipblock_id',
  1 => 'location_id',
));

	}


}


class lnkIPSubnetToVLAN extends cmdbAbstractObject
{
	public static function Init()
	{
		$aParams = array
		(
			'category' => 'bizmodel',
			'key_type' => 'autoincrement',
			'name_attcode' => array('ipsubnet_id', 'vlan_id'),
			'state_attcode' => '',
			'reconc_keys' => array('ipsubnet_id', 'vlan_id'),
			'db_table' => 'lnkipsubnettovlan',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',
		);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeExternalKey("ipsubnet_id", array("targetclass"=>'IPSubnet', "allowed_values"=>null, "sql"=>'ipsubnet_id', "is_null_allowed"=>false, "on_target_delete"=>DEL_AUTO, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("ipsubnet_name", array("allowed_values"=>null, "extkey_attcode"=>'ipsubnet_id', "target_attcode"=>'name', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalKey("vlan_id", array("targetclass"=>'VLAN', "allowed_values"=>null, "sql"=>'vlan_id', "is_null_allowed"=>false, "on_target_delete"=>DEL_AUTO, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("vlan_tag", array("allowed_values"=>null, "extkey_attcode"=>'vlan_id', "target_attcode"=>'vlan_tag', "always_load_in_tables"=>false)));


		MetaModel::Init_SetZListItems('details', array (
  0 => 'ipsubnet_id',
  1 => 'vlan_id',
));
		MetaModel::Init_SetZListItems('standard_search', array (
  0 => 'ipsubnet_id',
  1 => 'vlan_id',
));
		MetaModel::Init_SetZListItems('list', array (
  0 => 'ipsubnet_id',
  1 => 'ipsubnet_name',
  2 => 'vlan_id',
));

	}


}


class lnkIPSubnetToLocation extends cmdbAbstractObject
{
	public static function Init()
	{
		$aParams = array
		(
			'category' => 'bizmodel',
			'key_type' => 'autoincrement',
			'name_attcode' => array('location_id', 'ipsubnet_id'),
			'state_attcode' => '',
			'reconc_keys' => array('location_id', 'ipsubnet_id'),
			'db_table' => 'lnkipsubnettolocation',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',
		);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeExternalKey("ipsubnet_id", array("targetclass"=>'IPSubnet', "allowed_values"=>null, "sql"=>'ipsubnet_id', "is_null_allowed"=>false, "on_target_delete"=>DEL_AUTO, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("ipsubnet_name", array("allowed_values"=>null, "extkey_attcode"=>'ipsubnet_id', "target_attcode"=>'name', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalKey("location_id", array("targetclass"=>'Location', "allowed_values"=>null, "sql"=>'location_id', "is_null_allowed"=>false, "on_target_delete"=>DEL_AUTO, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("location_name", array("allowed_values"=>null, "extkey_attcode"=>'location_id', "target_attcode"=>'name', "always_load_in_tables"=>false)));


		MetaModel::Init_SetZListItems('details', array (
  0 => 'ipsubnet_id',
  1 => 'location_id',
));
		MetaModel::Init_SetZListItems('standard_search', array (
  0 => 'ipsubnet_id',
  1 => 'location_id',
));
		MetaModel::Init_SetZListItems('list', array (
  0 => 'ipsubnet_id',
  1 => 'location_id',
));

	}


}


class lnkIPAdressToIPAddress extends cmdbAbstractObject
{
	public static function Init()
	{
		$aParams = array
		(
			'category' => 'bizmodel,ipmgmt',
			'key_type' => 'autoincrement',
			'name_attcode' => array('ip2_id', 'ip1_id'),
			'state_attcode' => '',
			'reconc_keys' => array('ip2_id', 'ip1_id'),
			'db_table' => 'lnkipaddresstoipaddress',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',
		);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeExternalKey("ip1_id", array("targetclass"=>'IPAddress', "allowed_values"=>null, "sql"=>'ip1_id', "is_null_allowed"=>false, "on_target_delete"=>DEL_AUTO, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("ip1_fqdn", array("allowed_values"=>null, "extkey_attcode"=>'ip1_id', "target_attcode"=>'fqdn', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalKey("ip2_id", array("targetclass"=>'IPAddress', "allowed_values"=>null, "sql"=>'ip2_id', "is_null_allowed"=>false, "on_target_delete"=>DEL_AUTO, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("ip2_fqdn", array("allowed_values"=>null, "extkey_attcode"=>'ip2_id', "target_attcode"=>'fqdn', "always_load_in_tables"=>false)));


		MetaModel::Init_SetZListItems('details', array (
  0 => 'ip1_id',
  1 => 'ip2_id',
));
		MetaModel::Init_SetZListItems('standard_search', array (
  0 => 'ip1_id',
  1 => 'ip2_id',
));
		MetaModel::Init_SetZListItems('list', array (
  0 => 'ip1_id',
  1 => 'ip1_fqdn',
  2 => 'ip2_id',
  3 => 'ip2_fqdn',
));

	}


	/**
	 * Check validity of new subnet attributes before creation
   */
  function DoCheckToWrite()
  {
    // Run standard iTop checks first
    parent::DoCheckToWrite();
    
    // Make sure we don't link IP to itself
    if ($this->Get('ip1_id') == $this->Get('ip2_id'))
    {
  		$this->m_aCheckIssues[] = Dict::Format('UI:IPManagement:Action:New:IPAddress:NatIPsAretheSame');
  		return;
    }
  }

}


class lnkIPInterfaceToIPAddress extends cmdbAbstractObject
{
	public static function Init()
	{
		$aParams = array
		(
			'category' => 'bizmodel,ipmgmt',
			'key_type' => 'autoincrement',
			'name_attcode' => array('ipinterface_id', 'ipaddress_id'),
			'state_attcode' => '',
			'reconc_keys' => array('ipinterface_id', 'ipaddress_id'),
			'db_table' => 'lnkipinterfacetoipaddress',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',
		);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeExternalKey("ipinterface_id", array("targetclass"=>'IPInterface', "allowed_values"=>null, "sql"=>'ipinterface_id', "is_null_allowed"=>false, "on_target_delete"=>DEL_AUTO, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("ipinterface_name", array("allowed_values"=>null, "extkey_attcode"=>'ipinterface_id', "target_attcode"=>'name', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalKey("ipaddress_id", array("targetclass"=>'IPAddress', "allowed_values"=>null, "sql"=>'ipaddress_id', "is_null_allowed"=>false, "on_target_delete"=>DEL_AUTO, "depends_on"=>array(), "always_load_in_tables"=>false)));


		MetaModel::Init_SetZListItems('details', array (
  0 => 'ipinterface_id',
  1 => 'ipaddress_id',
));
		MetaModel::Init_SetZListItems('standard_search', array (
  0 => 'ipinterface_id',
  1 => 'ipaddress_id',
));
		MetaModel::Init_SetZListItems('list', array (
  0 => 'ipinterface_id',
  1 => 'ipaddress_id',
));

	}



	public function AfterInsert()
    {
		parent::AfterInsert();
		
		$iIpId = $this->Get('ipaddress_id');
		if ($iIpId != null)
		{
			$oIP = MetaModel::GetObject('IPAddress', $iIpId, false /* MustBeFound */);
			if (!is_null($oIP)) 
			{
				$oIP->Set('status', 'allocated');	
				$oIP->DBUpdate();
			}
		}
	}


	public function OnDelete()
    {
		parent::AfterDelete();
		
		$iIpIntId = $this->Get('ipinterface_id');
		$iIpId = $this->Get('ipaddress_id');
		if ($iIpId != null)
		{
			$oIP = MetaModel::GetObject('IPAddress', $iIpId, false /* MustBeFound */);
			if ($oIP != null)
			{
				if ($oIP->Get('status') == 'allocated')
				{
					// Reset status only of IP is not set on another interface
					$oIPInterfaceToIPAddressSearch = DBObjectSearch::FromOQL("SELECT lnkIPInterfaceToIPAddress AS l WHERE l.ipaddress_id = $iIpId AND l.ipinterface_id != $iIpIntId");
					$oIPInterfaceToIPAddressSet = new CMDBObjectSet($oIPInterfaceToIPAddressSearch);
					if ($oIPInterfaceToIPAddressSet->Count() == 0)
					{
						$oIP->Set('status', 'unassigned');	
						$oIP->DBUpdate();
					}
				}
			}
		}
	}

}



require_once('_ipconfig.class.inc.php'); // Implementation of the class _IPConfig
class IPConfig extends _IPConfig
{
	public static function Init()
	{
		$aParams = array
		(
			'category' => 'bizmodel,searchable,ipmgmt',
			'key_type' => 'autoincrement',
			'name_attcode' => 'name',
			'state_attcode' => '',
			'reconc_keys' => array('name', 'org_id', 'org_name'),
			'db_table' => 'ipconfig',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',
		);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeExternalKey("org_id", array("targetclass"=>'Organization', "allowed_values"=>null, "sql"=>'org_id', "is_null_allowed"=>false, "on_target_delete"=>DEL_MANUAL, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("org_name", array("allowed_values"=>null, "extkey_attcode"=>'org_id', "target_attcode"=>'name', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeString("name", array("allowed_values"=>null, "sql"=>'name', "default_value"=>'IP Settings', "is_null_allowed"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalKey("requestor_id", array("targetclass"=>'Person', "allowed_values"=>new ValueSetObjects("SELECT Person AS p WHERE p.org_id = :this->org_id"), "sql"=>'requestor_id', "is_null_allowed"=>true, "on_target_delete"=>DEL_MANUAL, "depends_on"=>array('org_id'), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("requestor_name", array("allowed_values"=>null, "extkey_attcode"=>'requestor_id', "target_attcode"=>'name', "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeInteger("ipv4_block_min_size", array("allowed_values"=>null, "sql"=>'ipv4_block_min_size', "default_value"=>'256', "is_null_allowed"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeEnum("ipv4_block_cidr_aligned", array("allowed_values"=>new ValueSetEnum("bca_yes,bca_no"), "display_style"=>'list', "sql"=>'ipv4_block_cidr_aligned', "default_value"=>'bca_yes', "is_null_allowed"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeEnum("reserve_subnet_IPs", array("allowed_values"=>new ValueSetEnum("reserve_no,reserve_yes"), "display_style"=>'radio_horizontal', "sql"=>'reserve_subnet_IPs', "default_value"=>'reserve_no', "is_null_allowed"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeEnum("ipv4_gateway_ip_format", array("allowed_values"=>new ValueSetEnum("subnetip_plus_1,broadcastip_minus_1,free_setup"), "display_style"=>'list', "sql"=>'ipv4_gateway_ip_format', "default_value"=>'subnetip_plus_1', "is_null_allowed"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeInteger("subnet_low_watermark", array("allowed_values"=>null, "sql"=>'subnet_low_watermark', "default_value"=>'60', "is_null_allowed"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeInteger("subnet_high_watermark", array("allowed_values"=>null, "sql"=>'subnet_high_watermark', "default_value"=>'80', "is_null_allowed"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeInteger("iprange_low_watermark", array("allowed_values"=>null, "sql"=>'iprange_low_watermark', "default_value"=>'60', "is_null_allowed"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeInteger("iprange_high_watermark", array("allowed_values"=>null, "sql"=>'iprange_high_watermark', "default_value"=>'80', "is_null_allowed"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeEnum("ip_allow_duplicate_name", array("allowed_values"=>new ValueSetEnum("ipdup_no,ipdup_yes"), "display_style"=>'radio_horizontal', "sql"=>'ip_allow_duplicate_name', "default_value"=>'ipdup_no', "is_null_allowed"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeEnum("mac_address_format", array("allowed_values"=>new ValueSetEnum("colons,hyphens,dots"), "display_style"=>'list', "sql"=>'mac_address_format', "default_value"=>'colons', "is_null_allowed"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeEnum("ping_before_assign", array("allowed_values"=>new ValueSetEnum("ping_no,ping_yes"), "display_style"=>'radio_horizontal', "sql"=>'ping_before_assign', "default_value"=>'ping_no', "is_null_allowed"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeEnum("ipv6_block_min_prefix", array("allowed_values"=>new ValueSetEnum("48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64"), "display_style"=>'list', "sql"=>'ipv6_block_min_prefix', "default_value"=>'64', "is_null_allowed"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeEnum("ipv6_block_cidr_aligned", array("allowed_values"=>new ValueSetEnum("bca_yes,bca_no"), "display_style"=>'list', "sql"=>'ipv6_block_cidr_aligned', "default_value"=>'bca_yes', "is_null_allowed"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeEnum("ipv6_gateway_ip_format", array("allowed_values"=>new ValueSetEnum("subnetip_plus_1,lastip,free_setup"), "display_style"=>'list', "sql"=>'ipv6_gateway_ip_format', "default_value"=>'subnetip_plus_1', "is_null_allowed"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));


		MetaModel::Init_SetZListItems('details', array (
  'col:col1' => 
  array (
    'fieldset:Class:IPConfig:baseinfo' => 
    array (
      0 => 'org_id',
      1 => 'name',
      2 => 'requestor_id',
    ),
    'fieldset:Class:IPConfig:blockinfo' => 
    array (
      0 => 'ipv4_block_min_size',
      1 => 'ipv6_block_min_prefix',
      2 => 'ipv4_block_cidr_aligned',
      3 => 'ipv6_block_cidr_aligned',
    ),
  ),
  'col:col2' => 
  array (
    'fieldset:Class:IPConfig:subnetinfo' => 
    array (
      0 => 'reserve_subnet_IPs',
      1 => 'ipv4_gateway_ip_format',
      2 => 'ipv6_gateway_ip_format',
      3 => 'subnet_low_watermark',
      4 => 'subnet_high_watermark',
    ),
    'fieldset:Class:IPConfig:iprangeinfo' => 
    array (
      0 => 'iprange_low_watermark',
      1 => 'iprange_high_watermark',
    ),
    'fieldset:Class:IPConfig:ipinfo' => 
    array (
      0 => 'ip_allow_duplicate_name',
      1 => 'mac_address_format',
      2 => 'ping_before_assign',
    ),
  ),
));
		MetaModel::Init_SetZListItems('standard_search', array (
  0 => 'ipv4_block_min_size',
  1 => 'ipv6_block_min_prefix',
  2 => 'ipv4_block_cidr_aligned',
  3 => 'ipv6_block_cidr_aligned',
  4 => 'reserve_subnet_IPs',
  5 => 'ipv4_gateway_ip_format',
  6 => 'ipv6_gateway_ip_format',
  7 => 'subnet_low_watermark',
  8 => 'subnet_high_watermark',
  9 => 'iprange_low_watermark',
  10 => 'iprange_high_watermark',
  11 => 'ip_allow_duplicate_name',
  12 => 'mac_address_format',
  13 => 'ping_before_assign',
  14 => 'org_id',
  15 => 'requestor_id',
));
		MetaModel::Init_SetZListItems('list', array (
  0 => 'org_id',
));

	}


}
//
// Menus
//

global $__comp_menus__; // ensure that the global variable is indeed global !
$__comp_menus__['IPManagement'] = new MenuGroup('IPManagement', 25);
$__comp_menus__['IPSpace'] = new DashboardMenuNode('IPSpace', dirname(__FILE__).'/ipspace_dashboard_menu.xml', $__comp_menus__['IPManagement']->GetIndex(), 10);
$__comp_menus__['NewIPObject'] = new NewObjectMenuNode('NewIPObject', 'IPObject', $__comp_menus__['IPSpace']->GetIndex(), 20);
$__comp_menus__['SearchIPObject'] = new SearchMenuNode('SearchIPObject', 'IPObject', $__comp_menus__['IPSpace']->GetIndex(), 30);
$__comp_menus__['Ipv4ShortCut'] = new TemplateMenuNode('Ipv4ShortCut', '', $__comp_menus__['IPManagement']->GetIndex(), 40);
$__comp_menus__['IPv4Block'] = new OQLMenuNode('IPv4Block', "SELECT IPv4Block", $__comp_menus__['Ipv4ShortCut']->GetIndex(), 10, false);
$__comp_menus__['IPv4Subnet'] = new OQLMenuNode('IPv4Subnet', "SELECT IPv4Subnet", $__comp_menus__['Ipv4ShortCut']->GetIndex(), 20, false);
$__comp_menus__['IPv4Range'] = new OQLMenuNode('IPv4Range', "SELECT IPv4Range", $__comp_menus__['Ipv4ShortCut']->GetIndex(), 30, false);
$__comp_menus__['IPv4Address'] = new OQLMenuNode('IPv4Address', "SELECT IPv4Address", $__comp_menus__['Ipv4ShortCut']->GetIndex(), 40, false);
$__comp_menus__['Catalogs'] = new TemplateMenuNode('Catalogs', '', $__comp_menus__['DataAdministration']->GetIndex(), 50);
$__comp_menus__['IPConfig'] = new OQLMenuNode('IPConfig', "SELECT IPConfig", $__comp_menus__['Catalogs']->GetIndex(), 90, false);
